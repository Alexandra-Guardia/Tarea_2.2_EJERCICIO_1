#           Autor:
#   María Alexandra Guardia Canche
#   alexandra.guardia.25@gmail.com
#   Versión 1.0 : 11/02/2025

# Importación de bibliotecas necesarias
import numpy as np  # Para cálculos numéricos y manejo de arreglos
import matplotlib.pyplot as plt  # Para generación de gráficos

# Definir la función g(x) para el método de punto fijo
def g(x):
    return (-1 + 3*x)**(1/2)  # Función de iteración g(x)

# Criterio de convergencia / Derivada de la función 
def g_prime(x):
    return (3) / 2*(3*x-1)**(1/2)  # Derivada de g(x), usada para verificar convergencia

# Error absoluto
def error_absoluto(x_new, x_old):
    return abs(x_new - x_old)  # Calcula la diferencia absoluta entre dos iteraciones

# Error relativo
def error_relativo(x_new, x_old):
    return abs((x_new - x_old) / x_new)  # Calcula la diferencia relativa entre iteraciones

# Error cuadrático
def error_cuadratico(x_new, x_old):
    return (x_new - x_old)**2  # Calcula el error cuadrático

# Método de punto fijo
def punto_fijo(x0, tol=1e-5, max_iter=100):
    iteraciones = []  # Lista para almacenar los valores de cada iteración
    errores_abs = []  # Lista para almacenar los errores absolutos
    errores_rel = []  # Lista para almacenar los errores relativos
    errores_cuad = []  # Lista para almacenar los errores cuadrados

    x_old = x0  # Inicializa la variable con el valor inicial
    for i in range(max_iter):  # Iterar hasta el número máximo permitido
        x_new = g(x_old)  # Calcular el nuevo valor usando la función g(x)
        e_abs = error_absoluto(x_new, x_old)  # Calcular error absoluto
        e_rel = error_relativo(x_new, x_old)  # Calcular error relativo
        e_cuad = error_cuadratico(x_new, x_old)  # Calcular error cuadrático

        # Guardar los valores en las listas correspondientes
        iteraciones.append((i+1, x_new, e_abs, e_rel, e_cuad))
        errores_abs.append(e_abs)
        errores_rel.append(e_rel)
        errores_cuad.append(e_cuad)

        # Si el error absoluto es menor a la tolerancia, detener iteración
        if e_abs < tol:
            break

        x_old = x_new  # Actualizar x_old para la siguiente iteración

    # Devolver los valores obtenidos en las iteraciones
    return iteraciones, errores_abs, errores_rel, errores_cuad

# Parámetros iniciales
x0 = 1.5  # Valor inicial
iteraciones, errores_abs, errores_rel, errores_cuad = punto_fijo(x0)  # Ejecutar método

# Imprimir tabla de iteraciones
print("Iteración | x_n      | Error absoluto | Error relativo | Error cuadrático")
print("-----------------------------------------------------------------------")
for it in iteraciones:
    # Imprime la tabla con los valores de cada iteración
    print(f"{it[0]:9d} | {it[1]:.6f} | {it[2]:.6e} | {it[3]:.6e} | {it[4]:.6e}")

# Graficar la convergencia
x_vals = np.linspace(-1, 3, 100)  # Generar valores de x para la gráfica
y_vals = g(x_vals)  # Evaluar g(x) en esos valores

plt.figure(figsize=(8, 5))  # Crear figura con tamaño definido
plt.plot(x_vals, y_vals, label=r"$g(x) = (1 - x)^{1/3}$", color="blue")  # Graficar g(x)
plt.plot(x_vals, x_vals, linestyle="dashed", color="red", label="y = x")  # Línea y=x

# Graficar iteraciones
x_points = [it[1] for it in iteraciones]  # Extraer valores de x obtenidos en cada iteración
y_points = [g(x) for x in x_points]  # Evaluar g(x) en esos puntos
plt.scatter(x_points, y_points, color="black", zorder=3)  # Marcar los puntos en la gráfica
plt.plot(x_points, y_points, linestyle="dotted", color="black", label="Iteraciones")  # Unir los puntos

plt.xlabel("x")  # Etiqueta del eje x
plt.ylabel("g(x)")  # Etiqueta del eje y
plt.legend()  # Mostrar leyenda
plt.grid(True)  # Activar la cuadrícula
plt.title("Método de Punto Fijo")  # Título del gráfico
plt.savefig("punto_fijo_convergencia.png")  # Guardar la figura en un archivo
plt.show()  # Mostrar la gráfica

# Graficar errores
plt.figure(figsize=(8, 5))  # Crear nueva figura
plt.plot(range(1, len(errores_abs) + 1), errores_abs, marker="o", label="Error absoluto")  # Gráfico del error absoluto
plt.plot(range(1, len(errores_rel) + 1), errores_rel, marker="s", label="Error relativo")  # Gráfico del error relativo
plt.plot(range(1, len(errores_cuad) + 1), errores_cuad, marker="^", label="Error cuadrático")  # Gráfico del error cuadrático
plt.xlabel("Iteración")  # Etiqueta del eje x
plt.ylabel("Error")  # Etiqueta del eje y
plt.yscale("log")  # Escala logarítmica para visualizar mejor la convergencia
plt.legend()  # Mostrar leyenda
plt.grid(True)  # Activar la cuadrícula
plt.title("Evolución de los Errores")  # Título de la gráfica

plt.show()  # Mostrar la gráfica de errores
